# -------------------------------------------------------------------------- #
# Copyright 2006-2009, University of Chicago                                 #
# Copyright 2008-2009, Distributed Systems Architecture Group, Universidad   #
# Complutense de Madrid (dsa-research.org)                                   #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #
from haizea.pluggable.accounting.models import AcceptedAR, Experiment,\
    RejectedAR, AcceptedIM, RejectedIM, CompletedBE, QueueSizeBE,\
    LeaseStatistics,TotalTime
from haizea.common.utils import pickle, get_clock
from mx.DateTime import DateTime, TimeDelta, Parser
from time import time 

"""Accounting probes that collect data from leases"""

from haizea.core.accounting import AccountingProbe, AccountingDataCollection
from haizea.core.leases import Lease
                
class ARProbe(AccountingProbe):
    """
    Collects information from Advance Reservation leases
    
    * Counters
    
      - "Accepted AR": Number of accepted AR leases 
      - "Rejected AR": Number of rejected AR leases

    * Per-run data
    
      - "Total accepted AR": Final number of accepted AR leases
      - "Total rejected AR": Final number of rejected AR leases

    """
    COUNTER_ACCEPTED="Accepted AR"
    COUNTER_REJECTED="Rejected AR"
    STAT_ACCEPTED="Total accepted AR"
    STAT_REJECTED="Total rejected AR"

    
    def __init__(self, accounting):
        """See AccountingProbe.__init__"""
        AccountingProbe.__init__(self, accounting)
        self.accounting.create_counter(ARProbe.COUNTER_ACCEPTED, AccountingDataCollection.AVERAGE_NONE)
        self.accounting.create_counter(ARProbe.COUNTER_REJECTED, AccountingDataCollection.AVERAGE_NONE)
        self.accounting.create_stat(ARProbe.STAT_ACCEPTED)
        self.accounting.create_stat(ARProbe.STAT_REJECTED)



        self.AVG_AR_TT = 0
        self.ARTT = 0


    def finalize_accounting(self, db):
        """See AccountingProbe.finalize_accounting"""        
        self._set_stat_from_counter(ARProbe.STAT_ACCEPTED, ARProbe.COUNTER_ACCEPTED)
        self._set_stat_from_counter(ARProbe.STAT_REJECTED, ARProbe.COUNTER_REJECTED)

 
        accepted_ars = []
        rejected_ars = []
        
        experiment = db.query(Experiment).order_by("-id").first()
        

        for e in self.accounting.data.counters[ARProbe.COUNTER_ACCEPTED]:
            d = {}
            d['experiment_id'] = experiment.id
            d['time'] = e[0] / 60.0
            d['lease_id'] = e[1]
            d['count'] = e[2]
            d['TT_AR'] = self.ARTT / 60.0
            if e[1] !=  None:
                accepted_ars.append(d)
            
        for e in self.accounting.data.counters[ARProbe.COUNTER_REJECTED]:
            d = {}
            d['experiment_id'] = experiment.id
            d['time'] = e[0] / 60.0
            d['lease_id'] = e[1]
            d['count'] = e[2]
            if e[1] !=  None :
                rejected_ars.append(d)
        
        db.execute(AcceptedAR.__table__.insert(), accepted_ars)
        db.execute(RejectedAR.__table__.insert(), rejected_ars)

        #save stats
        experiment.total_accepted_ar = self.accounting.data.stats['Total accepted AR']
        experiment.total_rejected_ar = self.accounting.data.stats['Total rejected AR']

        if self.accounting.data.stats['Total accepted AR'] != 0:
            experiment.AVG_TT_AR = self.AVG_AR_TT / (self.accounting.data.stats['Total accepted AR']*60.0)   
        else:
            experiment.AVG_TT_AR = 0     


        db.commit()

    def at_lease_request(self, lease):
        """See AccountingProbe.at_lease_request"""                
        if lease.get_type() == Lease.ADVANCE_RESERVATION:
            if lease.get_state() == Lease.STATE_PENDING:
                self.accounting.incr_counter(ARProbe.COUNTER_ACCEPTED, lease.id)
            elif lease.get_state() == Lease.STATE_REJECTED:
                self.accounting.incr_counter(ARProbe.COUNTER_REJECTED, lease.id)

    def at_lease_done(self, lease):
        """See AccountingProbe.at_lease_done"""
        now = get_clock().get_time()    
        self.ARTT =  now - lease.get_start_actual()
        if lease.get_type() == Lease.ADVANCE_RESERVATION:
            if lease.get_state() == Lease.STATE_REJECTED:
                self.accounting.incr_counter(ARProbe.COUNTER_REJECTED, lease.id)
            else:
                self.AVG_AR_TT += self.ARTT  # Acommulating AR TT




class IMProbe(AccountingProbe):
    """
    Collects information from immediate leases
    
    * Counters
    
      - "Accepted Immediate": Number of accepted Immediate leases 
      - "Rejected Immediate": Number of rejected Immediate leases

    * Per-run data
    
      - "Total accepted Immediate": Final number of accepted Immediate leases
      - "Total rejected Immediate": Final number of rejected Immediate leases

    """
    COUNTER_ACCEPTED="Accepted Immediate"
    COUNTER_REJECTED="Rejected Immediate"
    STAT_ACCEPTED="Total accepted Immediate"
    STAT_REJECTED="Total rejected Immediate"
    
    def __init__(self, accounting):
        """See AccountingProbe.__init__"""        
        AccountingProbe.__init__(self, accounting)
        self.accounting.create_counter(IMProbe.COUNTER_ACCEPTED, AccountingDataCollection.AVERAGE_NONE)
        self.accounting.create_counter(IMProbe.COUNTER_REJECTED, AccountingDataCollection.AVERAGE_NONE)
        self.accounting.create_stat(IMProbe.STAT_ACCEPTED)
        self.accounting.create_stat(IMProbe.STAT_REJECTED)
        self.AVG_IM_TT = 0 
        self.IMTT = 0

    def finalize_accounting(self, db):
        """See AccountingProbe.finalize_accounting"""        
        self._set_stat_from_counter(IMProbe.STAT_ACCEPTED, IMProbe.COUNTER_ACCEPTED)
        self._set_stat_from_counter(IMProbe.STAT_REJECTED, IMProbe.COUNTER_REJECTED)
        
        accepted_ims = []
        rejected_ims = []
        
        experiment = db.query(Experiment).order_by("-id").first()
        
        for e in self.accounting.data.counters[IMProbe.COUNTER_ACCEPTED]:
            d = {}
            d['experiment_id'] = experiment.id
            d['time'] = e[0] / 60.0
            d['lease_id'] = e[1]
            d['count'] = e[2]
            d['TT_IM'] = self.IMTT / 60.0
            if e[1] !=  None:
                accepted_ims.append(d)  
      
        for e in self.accounting.data.counters[IMProbe.COUNTER_REJECTED]:
            d = {}
            d['experiment_id'] = experiment.id
            d['time'] = e[0] / 60.0
            d['lease_id'] = e[1] 
            d['count'] = e[2]
            if e[1] !=  None: 
                rejected_ims.append(d)
        
        #save stats
        experiment.total_accepted_im = self.accounting.data.stats['Total accepted Immediate']
        experiment.total_rejected_im = self.accounting.data.stats['Total rejected Immediate']
       
        if self.accounting.data.stats['Total accepted Immediate'] != 0:
              experiment.AVG_TT_IM = self.AVG_IM_TT / (self.accounting.data.stats['Total accepted Immediate']*60.0)
        else:       
            experiment.AVG_TT_IM = 0 

        db.execute(AcceptedIM.__table__.insert(), accepted_ims)
        db.execute(RejectedIM.__table__.insert(), rejected_ims)
        
        db.commit()


    def at_lease_request(self, lease):
        """See AccountingProbe.at_lease_request"""                        
        if lease.get_type() == Lease.IMMEDIATE:
            if lease.get_state() == Lease.STATE_PENDING:
                self.accounting.incr_counter(IMProbe.COUNTER_ACCEPTED, lease.id)
            elif lease.get_state() == Lease.STATE_REJECTED:
                self.accounting.incr_counter(IMProbe.COUNTER_REJECTED, lease.id)

    def at_lease_done(self, lease):
        """See AccountingProbe.at_lease_done""" 
        now = get_clock().get_time()    
        self.IMTT =  now - lease.get_start_actual()       
        if lease.get_type() == Lease.IMMEDIATE:
            if lease.get_state() == Lease.STATE_REJECTED:
                self.accounting.incr_counter(IMProbe.COUNTER_REJECTED, lease.id)
            else:
                self.AVG_IM_TT += self.IMTT  # Acommulating IM TT




class BEProbe(AccountingProbe):
    """
    Collects information from best-effort leases
    
    * Counters
    
      - "Best-effort completed": Number of best-effort leases completed
        throughout the run
      - "Queue size": Size of the queue throughout the run

    * Per-lease data
    
      - "Waiting time": Time (in seconds) the lease waited in the queue
        before resources were allocated to it.
      - "Slowdown": Slowdown of the lease (time required to run the lease
        to completion divided by the time it would have required on a
        dedicated system)

    * Per-run data
    
      - "Total best-effort completed": Final number of completed best-effort leases
      - "all-best-effort": The time (in seconds) when the last best-effort
        lease was completed.

    """
        
    COUNTER_BESTEFFORTCOMPLETED="Best-effort completed"
    COUNTER_QUEUESIZE="Queue size"
    LEASE_STAT_WAITINGTIME="Waiting time"
    LEASE_STAT_SLOWDOWN="Slowdown"
    LEASE_STAT_STARTED="started_time" # At what time the BE started
    LEASE_STAT_FINISHED="finished_time"  # At what time the BE finished
    LEASE_STAT_PREEMPTION="Best-effort preemption number" # number of time BE preempted 
    LEASE_STAT_TTBE="Best-effort Turnaroundtime"        # turnaround time for a BE lease 
    STAT_BESTEFFORTCOMPLETED="Total best-effort completed"
    STAT_ALLBESTEFFORT="all-best-effort"
    STAT_ALLBESTEFFORTTT="AVG best-effort Turnaround time"   # AVG turnaround time for all BE leases
  

    
    def __init__(self, accounting):
        """See AccountingProbe.__init__"""

        AccountingProbe.__init__(self, accounting)
        self.accounting.create_counter(BEProbe.COUNTER_BESTEFFORTCOMPLETED, AccountingDataCollection.AVERAGE_NONE)
        self.accounting.create_counter(BEProbe.COUNTER_QUEUESIZE, AccountingDataCollection.AVERAGE_TIMEWEIGHTED)
        self.accounting.create_lease_stat(BEProbe.LEASE_STAT_WAITINGTIME)
        self.accounting.create_lease_stat(BEProbe.LEASE_STAT_PREEMPTION) 
        self.accounting.create_lease_stat(BEProbe.LEASE_STAT_STARTED)
        self.accounting.create_lease_stat(BEProbe.LEASE_STAT_FINISHED)
        self.accounting.create_lease_stat(BEProbe.LEASE_STAT_TTBE)
        self.accounting.create_lease_stat(BEProbe.LEASE_STAT_SLOWDOWN)
        self.accounting.create_stat(BEProbe.STAT_BESTEFFORTCOMPLETED)
        self.accounting.create_stat(BEProbe.STAT_ALLBESTEFFORT)
        self.accounting.create_stat(BEProbe.STAT_ALLBESTEFFORTTT)
        self.AVG_BE_TT = 0   



    
    def finalize_accounting(self, db):
        """See AccountingProbe.finalize_accounting"""        
        self._set_stat_from_counter(BEProbe.STAT_BESTEFFORTCOMPLETED, BEProbe.COUNTER_BESTEFFORTCOMPLETED)
        all_best_effort = self.accounting.get_last_counter_time(BEProbe.COUNTER_BESTEFFORTCOMPLETED)
        all_best_effort_TT = (self.AVG_BE_TT / (self.accounting.data.stats['Total best-effort completed']*60.0))
        self.accounting.set_stat(BEProbe.STAT_ALLBESTEFFORTTT, all_best_effort_TT) # for final result in the Termainal 
        self.accounting.set_stat(BEProbe.STAT_ALLBESTEFFORT, all_best_effort) 
        
        completed_bes = []
        queue_size_bes = []
        lease_stats = []
        
        experiment = db.query(Experiment).order_by("-id").first()
       

        for e  in self.accounting.data.counters[BEProbe.COUNTER_BESTEFFORTCOMPLETED]:
            d = {}
            d['experiment_id'] = experiment.id
            d['time'] = e[0] / 60.0
            d['lease_id'] = e[1]
            d['count'] = e[2]
            completed_bes.append(d)
            
        for e in self.accounting.data.counters[BEProbe.COUNTER_QUEUESIZE]:
            d = {}
            d['experiment_id'] = experiment.id
            d['time'] = e[0] / 60.0
            d['lease_id'] = e[1]
            d['count'] = e[2]
            queue_size_bes.append(d)
        
        for k, v in self.accounting.data.lease_stats.iteritems():
            d = {}
            d['experiment_id'] = experiment.id
            d['lease_id'] = k
            d['waiting_time'] = v['Waiting time']/60.0
            d['slowdown'] = v['Slowdown']

            d['finished'] = str( v['finished_time']).split()[1]
            d['TT_BE'] = v['Best-effort Turnaroundtime']/60.0
            d['preemption_counter'] = v['Best-effort preemption number']
            if k !=  None:
                lease_stats.append(d)
        
        #save stats
        experiment.total_completed_be = self.accounting.data.stats['Total best-effort completed']
        experiment.be_completed_after = self.accounting.data.stats['all-best-effort'] / 60.0
        experiment.AVG_TT_BE = (self.AVG_BE_TT / (self.accounting.data.stats['Total best-effort completed']*60.0))


        db.execute(CompletedBE.__table__.insert(), completed_bes)
        db.execute(QueueSizeBE.__table__.insert(), queue_size_bes)
        db.execute(LeaseStatistics.__table__.insert(), lease_stats)
        db.commit()
        
    def at_timestep(self, lease_scheduler):
        """See AccountingProbe.at_timestep"""        
        queue_len = lease_scheduler.queue.length()
        self.accounting.append_to_counter(BEProbe.COUNTER_QUEUESIZE, queue_len)

    def at_lease_request(self, lease):
        """See AccountingProbe.at_lease_request"""    
        if lease.get_type() == Lease.BEST_EFFORT:
            self.accounting.set_lease_stat(BEProbe.LEASE_STAT_STARTED, lease.id, lease.submit_time)

    def turnaround_time(self, lease, now):
        return now-lease.submit_time

    def at_lease_done(self, lease):
        """See AccountingProbe.at_lease_done""" 

        if lease.get_type() == Lease.BEST_EFFORT:
            wait = lease.get_waiting_time().seconds
            now = get_clock().get_time()    
            BBTT = self.turnaround_time(lease, now).seconds
            self.AVG_BE_TT += BBTT
            self.accounting.set_lease_stat(BEProbe.LEASE_STAT_PREEMPTION, lease.id, lease.strv_counter)
            self.accounting.set_lease_stat(BEProbe.LEASE_STAT_FINISHED, lease.id, now)
            self.accounting.set_lease_stat(BEProbe.LEASE_STAT_WAITINGTIME, lease.id, wait)
            self.accounting.set_lease_stat(BEProbe.LEASE_STAT_TTBE, lease.id, BBTT)
            self.accounting.set_lease_stat(BEProbe.LEASE_STAT_SLOWDOWN, lease.id, lease.get_slowdown())
            self.accounting.incr_counter(BEProbe.COUNTER_BESTEFFORTCOMPLETED, lease.id)


class TotalTimeprob(AccountingProbe):
    """
    Collects information from best-effort leases
    
    * Counters
    
      - "Best-effort completed": Number of best-effort leases completed
        throughout the run
      - "Queue size": Size of the queue throughout the run

    * Per-lease data
    
      - "Waiting time": Time (in seconds) the lease waited in the queue
        before resources were allocated to it.
      - "Slowdown": Slowdown of the lease (time required to run the lease
        to completion divided by the time it would have required on a
        dedicated system)

    * Per-run data
    
      - "Total best-effort completed": Final number of completed best-effort leases
      - "all-best-effort": The time (in seconds) when the last best-effort
        lease was completed.

    """
        
    COUNTER_="Total Time"
    LEASE_STAT_WAITINGTIME="Waiting time"
    STAT_BESTEFFORTCOMPLETED="Total completed"
    STAT_ALLBESTEFFORT="all-leases turnaround time"    
    COUNTER_BESTEFFORTCOMPLETED = "Total leases completed" 

    def __init__(self, accounting):
        """See AccountingProbe.__init__"""
	# Average Total Time 
        AccountingProbe.__init__(self, accounting)
        self.accounting.create_counter(TotalTimeprob.COUNTER_BESTEFFORTCOMPLETED, AccountingDataCollection.AVERAGE_NONE)
        self.accounting.create_lease_stat(TotalTimeprob.LEASE_STAT_WAITINGTIME)
        self.accounting.create_stat(TotalTimeprob.STAT_ALLBESTEFFORT) 
        self.accounting.create_stat(TotalTimeprob.STAT_BESTEFFORTCOMPLETED)
	self.completion = [] 
	# AVG Waiting Time
	self.total_waiting = 0 
	# Throughput 
	self.throughput1 =0
	self.throughput2 =0	
	self.cntr = 0
	self.submitted = 0 


    def finalize_accounting(self, db):
        """See AccountingProbe.finalize_accounting"""        
        self._set_stat_from_counter(TotalTimeprob.STAT_BESTEFFORTCOMPLETED, TotalTimeprob.COUNTER_BESTEFFORTCOMPLETED)

        
        lease_stats = []
        
        experiment = db.query(Experiment).order_by("-id").first()
        

        for k, v in self.accounting.data.lease_stats.iteritems():
            d = {}
            d['experiment_id'] = experiment.id
            d['lease_id'] = k
            d['waiting_time'] = v['Waiting time']/60.0
            lease_stats.append(d)

	total_mins= 0
	for i in self.completion:
		total_mins = self.__sum_time (total_mins, i )

        #save stats
        experiment.TotalTime =total_mins		
        db.execute(TotalTime.__table__.insert(),lease_stats)
	# Waiting time 
	######################################
	self.total_waiting= self.total_waiting/60     
        average_waiting = self.total_waiting / self.cntr
        experiment.AverageWaitingTime = average_waiting
	######################################
	# Throughput 
	DataRate  = float(self.cntr)/float(self.submitted)
	DataRate = DataRate *100
        experiment.Throughput_after_1_hour = self.throughput1 
        experiment.Throughput_after_2_hour = self.throughput2 
	experiment.DataRate = DataRate 
	######################################

        db.commit()


        self.accounting.set_stat(TotalTimeprob.STAT_ALLBESTEFFORT, total_mins)
#################################################################################################
#												#
#			 Write the results into result file		    	                # #												#
#################################################################################################					              			

	f = open("/home/ubuntu/share/Results/results.txt","a")
	f.write("Average Total Time=\t"+str(experiment.TotalTime)+"\t"+"Average Waiting Time=\t"+str(experiment.AverageWaitingTime)+"\t"+"Throughput.1=\t"+str(experiment.Throughput_after_1_hour)+"\t"+"Throughput.2=\t"+str(experiment.Throughput_after_2_hour)+"\t"+"Job Completion Rate=\t"+str(experiment.DataRate)+"\n")
	f.close()


    def at_lease_done(self, lease):
	now = get_clock().get_time()
	completion_ = now - lease.submit_time
        """See AccountingProbe.at_lease_done""" 
	self.accounting.incr_counter(TotalTimeprob.COUNTER_BESTEFFORTCOMPLETED, lease.id)                       
        self.accounting.set_lease_stat(TotalTimeprob.LEASE_STAT_WAITINGTIME, lease.id, completion_)
	self.completion.append (completion_)
	#######################
	self.total_waiting = self.total_waiting + lease.get_waiting_time().seconds
	#######################
	self.cntr =self.cntr + 1



    def __sum_time (self,total_mins, time2):

	time2 = str(time2).split(".")[0]
	h2= time2.split(":")[0]
	m2= time2.split(":")[1]
	s2= time2.split(":")[2]	
	s = int(s2)
	if (total_mins+int(m2))>=60:
		m = (total_mins+int(m2)) - 60
		mf=True
	else :	
		m = (total_mins+int(m2))
		mf=False
	h = int(h2)
	if mf ==True : 
		h = h + 1 	
	total_sec = h*3600 +m*60+ s
        return total_sec / 60

    def at_timestep(self, lease_scheduler):
        """See AccountingProbe.at_timestep"""  
	now = get_clock().get_time()
	hour1 = self.diff1 (now)
	print "NOW cntr =", self.cntr
	if (self.throughput1 == 0 and hour1 ):
		print "Calculated"
		self.throughput1 =self.cntr 

	now = get_clock().get_time()
	hour2 = self.diff2 (now)
	print "NOW cntr =", self.cntr 
	if (self.throughput2 ==0 and hour2 ):
		print "Calculated"
		self.throughput2 =self.cntr 


    def diff1 (self, time):
	date = str(time).split(" ")[0]
	y = int(date.split("-")[0])
	m = int(date.split("-")[1])
	d = int(date.split("-")[2])
	if y==2014 and m == 1 and d == 3: 
		time =  str(time).split(" ")[1]
		h= int(time.split(":")[0])
		m= int(time.split(":")[1])
		s= time.split(":")[2]
		if h >= 3 and h <=14 :
			return True 
		else:
			return False 

    def diff2 (self, time):
	date = str(time).split(" ")[0]
	y = int(date.split("-")[0])
	m = int(date.split("-")[1])
	d = int(date.split("-")[2])
	if y==2014 and m == 1 and d == 9: 
		time =  str(time).split(" ")[1]
		h= int(time.split(":")[0])
		m= int(time.split(":")[1])
		s= time.split(":")[2]	
		if h >= 3 and h <=14 :
			return True 
		else:
			return False 

    def at_lease_request(self, lease):
	self.submitted = self.submitted + 1














